using ConsoleDump;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExercisesAlgo.Trees
{
    public class PathNumbers
    {
        public static void Execute()
        {
            var tree = Tree.Build("1965 8 4 8 1 3 8 8 7 0 6 7 -1 5 5 5 0 8 9 8 3 9 5 2 -1 -1 3 2 1 8 9 7 7 0 9 9 4 8 7 1 9 1 0 6 0 2 3 8 4 9 0 2 0 4 9 4 -1 -1 2 4 7 4 5 4 3 8 9 0 3 6 3 9 1 2 6 0 6 -1 8 4 3 0 9 -1 9 3 6 -1 7 0 -1 7 9 -1 8 6 3 0 3 6 -1 -1 -1 9 -1 -1 0 3 5 7 5 2 0 1 2 3 4 1 4 7 3 0 -1 -1 2 7 -1 2 5 1 -1 -1 -1 0 -1 -1 -1 -1 5 7 5 4 -1 2 -1 8 2 9 2 5 1 4 0 1 9 1 0 0 6 4 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 1 3 -1 -1 1 2 -1 5 9 6 5 5 4 8 8 9 6 7 0 7 -1 7 2 -1 0 0 -1 -1 5 -1 2 -1 7 5 8 8 3 8 5 7 3 2 0 6 3 8 9 -1 -1 3 4 2 -1 8 6 -1 4 1 1 -1 9 -1 8 7 -1 8 -1 -1 -1 -1 -1 -1 0 6 5 5 3 3 9 7 -1 -1 -1 -1 0 6 -1 2 0 -1 8 5 -1 -1 -1 -1 -1 -1 0 0 -1 -1 7 1 -1 -1 -1 -1 -1 1 5 -1 -1 2 1 5 8 3 -1 -1 -1 -1 2 1 1 8 -1 2 7 -1 2 -1 6 -1 -1 -1 -1 4 -1 -1 -1 -1 -1 4 -1 -1 -1 -1 4 7 9 3 4 -1 4 2 -1 -1 1 5 4 2 -1 2 -1 -1 -1 -1 5 2 -1 4 2 6 -1 7 7 4 9 1 2 -1 -1 4 1 5 2 5 1 6 1 -1 -1 5 7 3 -1 -1 9 7 8 7 0 0 4 -1 3 4 -1 -1 2 0 9 1 -1 4 0 5 5 1 4 7 -1 2 8 -1 -1 -1 -1 -1 6 3 3 6 -1 3 -1 -1 8 9 -1 1 0 9 -1 5 3 0 -1 -1 1 -1 -1 8 -1 -1 1 3 1 9 6 9 1 -1 -1 -1 -1 3 -1 -1 9 4 5 9 9 4 9 9 1 8 -1 4 1 9 6 8 -1 8 -1 -1 2 1 8 -1 8 -1 -1 -1 -1 9 2 5 -1 -1 7 8 8 6 1 -1 3 5 2 -1 -1 -1 -1 -1 4 2 -1 -1 7 8 5 -1 4 -1 2 6 -1 -1 -1 -1 -1 -1 1 7 8 -1 9 2 9 9 8 3 -1 7 -1 -1 2 7 -1 9 7 4 -1 5 2 8 0 2 7 -1 2 -1 -1 7 6 2 0 -1 -1 -1 -1 -1 6 3 2 -1 -1 3 -1 -1 -1 3 -1 -1 -1 -1 6 -1 2 -1 -1 2 3 -1 -1 5 4 5 -1 -1 -1 7 8 -1 5 8 9 0 9 4 5 4 6 0 -1 -1 -1 -1 -1 -1 6 5 8 2 5 6 3 8 1 1 7 -1 -1 9 5 2 6 2 8 3 6 5 5 1 3 -1 -1 -1 0 -1 -1 6 -1 5 0 -1 3 9 3 7 -1 4 -1 -1 -1 -1 -1 -1 0 6 0 3 9 8 -1 6 4 8 -1 0 -1 -1 8 -1 9 6 3 3 3 6 -1 -1 -1 -1 5 -1 4 6 6 3 4 -1 3 5 2 -1 1 3 2 9 7 -1 -1 9 6 8 1 -1 2 2 4 0 7 1 -1 -1 8 6 2 0 8 -1 1 6 9 3 6 -1 3 -1 -1 8 -1 5 6 -1 -1 -1 -1 5 -1 -1 -1 -1 -1 6 -1 -1 -1 -1 3 -1 -1 -1 -1 -1 -1 9 -1 4 1 4 -1 -1 -1 0 8 8 -1 -1 0 2 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 9 -1 1 2 1 9 -1 -1 6 3 -1 8 4 -1 -1 5 -1 6 -1 6 7 8 5 1 6 5 7 8 -1 -1 -1 -1 4 5 0 4 -1 -1 7 4 4 5 6 4 -1 5 0 -1 5 -1 6 -1 -1 9 -1 9 -1 -1 -1 -1 -1 -1 7 0 3 -1 5 -1 -1 -1 7 2 1 -1 -1 0 4 0 -1 9 0 8 -1 0 6 -1 -1 4 -1 -1 -1 -1 -1 -1 3 2 3 6 -1 4 -1 4 -1 -1 -1 -1 6 9 2 -1 3 1 -1 -1 8 7 -1 3 0 8 -1 1 -1 -1 6 0 -1 -1 -1 4 -1 1 -1 -1 -1 -1 5 6 4 2 3 7 6 -1 1 6 0 6 0 3 -1 -1 -1 3 -1 -1 -1 -1 3 8 5 0 8 -1 -1 2 5 6 3 -1 -1 -1 -1 2 -1 -1 9 -1 -1 -1 -1 -1 -1 -1 -1 1 8 -1 -1 -1 5 -1 -1 9 -1 -1 5 2 7 9 4 6 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 1 1 1 -1 9 -1 -1 -1 -1 7 -1 -1 -1 -1 -1 -1 -1 7 -1 7 -1 -1 0 3 7 0 -1 -1 -1 -1 -1 9 -1 -1 -1 -1 3 0 1 -1 9 -1 -1 -1 5 -1 -1 -1 -1 7 -1 1 8 0 3 1 4 -1 7 -1 -1 -1 -1 -1 -1 3 0 5 -1 -1 -1 8 8 -1 -1 8 0 4 4 9 2 -1 2 -1 -1 0 2 1 -1 -1 -1 -1 1 -1 1 2 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 8 -1 -1 -1 -1 -1 1 5 8 -1 8 8 -1 -1 -1 -1 -1 0 -1 8 -1 4 -1 -1 -1 -1 -1 3 0 5 1 -1 -1 -1 5 -1 -1 4 -1 6 1 4 1 4 2 4 2 -1 -1 0 8 4 4 -1 -1 1 8 1 3 6 8 6 9 2 -1 7 3 -1 -1 8 -1 -1 -1 0 -1 5 0 -1 4 -1 -1 -1 -1 -1 -1 9 -1 5 -1 -1 4 -1 5 5 4 -1 -1 0 8 8 5 -1 -1 8 0 -1 -1 4 -1 3 7 -1 3 -1 7 -1 3 -1 3 8 6 -1 0 -1 -1 -1 -1 -1 1 2 -1 -1 -1 -1 -1 9 0 -1 -1 -1 -1 -1 9 0 -1 -1 -1 -1 4 -1 2 7 9 5 0 -1 5 -1 -1 -1 7 -1 0 -1 -1 -1 -1 -1 -1 -1 7 2 -1 -1 -1 -1 6 8 -1 -1 -1 1 3 -1 2 -1 8 -1 5 -1 -1 -1 -1 5 1 -1 -1 0 3 4 -1 -1 -1 -1 -1 6 9 -1 -1 -1 -1 -1 9 7 -1 -1 -1 -1 -1 5 9 -1 -1 -1 1 0 -1 1 4 -1 5 5 7 -1 -1 9 4 -1 -1 -1 8 2 9 6 1 9 3 -1 -1 3 9 1 4 5 -1 7 -1 4 7 -1 4 -1 -1 -1 -1 6 -1 9 7 7 -1 -1 -1 -1 -1 -1 2 2 1 -1 8 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 4 -1 4 6 4 -1 8 4 5 4 8 8 -1 8 -1 -1 3 -1 -1 -1 5 5 1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 9 6 4 4 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 4 7 4 0 7 9 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 7 5 -1 5 -1 9 -1 -1 -1 -1 -1 1 -1 2 1 -1 8 -1 -1 -1 -1 -1 -1 -1 5 0 2 -1 -1 -1 5 -1 -1 -1 -1 -1 -1 -1 3 9 -1 -1 0 -1 8 9 9 -1 -1 -1 3 0 -1 -1 -1 -1 -1 1 9 4 -1 5 0 5 0 6 -1 -1 9 -1 -1 -1 4 7 -1 1 -1 -1 -1 7 8 -1 7 -1 -1 -1 -1 -1 6 -1 -1 -1 0 -1 5 2 4 9 -1 6 -1 -1 -1 -1 -1 -1 1 4 -1 -1 5 -1 4 -1 -1 8 -1 7 2 4 9 8 -1 -1 7 -1 8 -1 -1 8 -1 -1 -1 -1 -1 1 4 -1 -1 -1 -1 -1 -1 4 -1 -1 -1 -1 -1 -1 8 9 8 7 -1 -1 -1 -1 7 9 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 6 -1 4 5 5 7 1 8 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 6 8 -1 7 0 -1 -1 -1 -1 -1 5 -1 -1 -1 -1 -1 -1 -1 -1 8 7 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 5 4 -1 -1 3 5 9 -1 -1 -1 7 7 -1 -1 -1 -1 -1 -1 -1 9 -1 6 9 -1 -1 -1 -1 -1 -1 -1 -1 9 -1 3 8 8 -1 1 -1 -1 6 -1 9 -1 9 3 2 -1 -1 -1 -1 7 9 -1 -1 -1 -1 -1 -1 2 6 9 -1 -1 -1 8 -1 -1 -1 -1 7 8 2 -1 -1 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 5 -1 -1 -1 -1 1 5 -1 -1 6 -1 -1 -1 3 3 -1 9 -1 -1 2 5 -1 -1 8 4 -1 6 -1 -1 9 0 4 8 5 4 6 1 -1 4 -1 -1 9 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 4 -1 8 -1 -1 -1 -1 7 -1 0 6 7 -1 6 -1 -1 -1 7 5 -1 -1 -1 -1 -1 -1 4 -1 7 -1 -1 -1 -1 -1 -1 -1 -1 -1 7 1 9 -1 4 8 3 3 1 -1 -1 4 -1 -1 -1 -1 0 -1 -1 8 2 8 0 -1 8 -1 1 -1 -1 -1 8 -1 -1 -1 -1 -1 3 2 -1 -1 -1 -1 0 8 -1 9 7 8 -1 -1 -1 -1 -1 3 7 -1 9 -1 -1 -1 -1 5 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 -1 -1 -1 -1 9 9 -1 -1 0 -1 -1 -1 -1 -1 7 -1 -1 -1 -1 0 5 7 -1 -1 -1 1 -1 -1 -1 -1 9 -1 -1 -1 -1");
            new PathNumbers().sumNumbers(tree).Dump();
            
        }
        List<int> numbers = new List<int>();
        public int sumNumbers(TreeNode A)
        {
            Traverse(A, 0);
            double sum = 0;
            foreach (var value in numbers)
            {
                sum = ((sum + value)%1003 );
            }
            return (int)(sum % 1003);
        }

        private void Traverse(TreeNode node, int val)
        {
            if (node == null) return;
            var newVal = (val * 10 % 1003 + node.val) % 1003; 
            if (node.left == null && node.right == null)
            {
                numbers.Add(newVal);
            }
            Traverse(node.left, newVal);
            Traverse(node.right, newVal);
        }
    }
}
