using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using ConsoleDump;

namespace ExercisesAlgo._2Pointers
{
    class Array3Pointers
    {
        public void Execute()
        {

            /*
            solve(new List<int>() { 1, 4, 10 },
                new List<int>() { 2,15,20},
                new List<int>() { 10,12}).Dump();
                */

            minimize(new List<int>() {   941, 994, 994, 999, 1014, 1027, 1040, 1048, 1053, 1054, 1071, 1084, 1098, 1119, 1138, 1138, 1141, 1172, 1205, 1213, 1215, 1223, 1226, 1243, 1269, 1288, 1303, 1304, 1325, 1330, 1342, 1362, 1369, 1371, 1376, 1378, 1387, 1394, 1414, 1423, 1425, 1439, 1456, 1477, 1496, 1509, 1518, 1530, 1542, 1547, 1596, 1612, 1618, 1672, 1676, 1679, 1695, 1708, 1710, 1728, 1738, 1741, 1743, 1748, 1748, 1773, 1788, 1822, 1831, 1852, 1864, 1867, 1898, 1903, 1937, 1958, 2006, 2019, 2024, 2044, 2067, 2069, 2100, 2112, 2117, 2119, 2130, 2137, 2145, 2153, 2166, 2180, 2183, 2190, 2194, 2199, 2204, 2218, 2220, 2221, 2225, 2263, 2270, 2271, 2297, 2304, 2313, 2322, 2340, 2354, 2393, 2394, 2399, 2419, 2421, 2429, 2431, 2436, 2439, 2451, 2455, 2455, 2495, 2505, 2528, 2542, 2547, 2557, 2561, 2578, 2592, 2592, 2597, 2633, 2634, 2635, 2640, 2641, 2673, 2676, 2677, 2689, 2701, 2743, 2774, 2780, 2791, 2810, 2831, 2839, 2859, 2860, 2866, 2867, 2880, 2888, 2890, 2896, 2900, 2937, 2956, 2969, 2988, 3004, 3011, 3026, 3034, 3064, 3077, 3083, 3083, 3086, 3100, 3108, 3118, 3125, 3135, 3138, 3160, 3172, 3177, 3186, 3210, 3220, 3228, 3240, 3260, 3281, 3289, 3290, 3299, 3333, 3337, 3371, 3377, 3381, 3401, 3416, 3436, 3459, 3462, 3463, 3464, 3466, 3472, 3488, 3489, 3490, 3529, 3533, 3550, 3583, 3589, 3608, 3609, 3618, 3622, 3627, 3641, 3647, 3663, 3667, 3668, 3688, 3705, 3706, 3709, 3710, 3721, 3725, 3726, 3729, 3741, 3777, 3819, 3856, 3856, 3879, 3880, 3886, 3921, 3923, 3928, 3942, 3952, 3954, 3964, 3992, 3995, 4040, 4043, 4056, 4058, 4094, 4097, 4105, 4106, 4120, 4123, 4126, 4153, 4155, 4163, 4180, 4194, 4207, 4214, 4215, 4227, 4227, 4228, 4229, 4263, 4273, 4280, 4290, 4300, 4310, 4328, 4346, 4348, 4350, 4355, 4360, 4360, 4364, 4380, 4405, 4408, 4412, 4424, 4437, 4439, 4442, 4444, 4469, 4469, 4491, 4491, 4495, 4532, 4539, 4548, 4556, 4567, 4575, 4576, 4577, 4581, 4604, 4650, 4654, 4669, 4669, 4677, 4682, 4702, 4706, 4718, 4723, 4726, 4729, 4748, 4771, 4775, 4776, 4797, 4822, 4826, 4836, 4850, 4850, 4861, 4870, 4875, 4885, 4898, 4900, 4901, 4931, 4932, 4950, 4954, 4957, 4972, 4979, 4995, 5001, 5001, 5005, 5010, 5023, 5023, 5043, 5063, 5069, 5069, 5073, 5081, 5145, 5146, 5147, 5150, 5157, 5165, 5178, 5178, 5180, 5181, 5191, 5205, 5228, 5240, 5245, 5252, 5254, 5257, 5312, 5316, 5318, 5322, 5323, 5328, 5344, 5353, 5355, 5367, 5369, 5374, 5406, 5411, 5419, 5433, 5436, 5441, 5467, 5470, 5470, 5492, 5541, 5542, 5575, 5581, 5582, 5597, 5611, 5630, 5631, 5632, 5644, 5652, 5655, 5656, 5663, 5673, 5708, 5723, 5746, 5748, 5789, 5802, 5803, 5814, 5822, 5822, 5850, 5850, 5855, 5868, 5870, 5883, 5887, 5902, 5906, 5918, 5924, 5929, 5931, 5971, 5979, 5992, 5994, 6003, 6004, 6018, 6026, 6028, 6030, 6032, 6037, 6043, 6064, 6070, 6076, 6111, 6129, 6150, 6166, 6169, 6171, 6178, 6179, 6190, 6195, 6198, 6199, 6223, 6253, 6257, 6300, 6301, 6338, 6349, 6350, 6380, 6388, 6391, 6394, 6416, 6420, 6453, 6454, 6487, 6487, 6491, 6500, 6503, 6507, 6516, 6527, 6542, 6555, 6579, 6579, 6583, 6584, 6586, 6587, 6598, 6641, 6659, 6662, 6706, 6721, 6725, 6725, 6741, 6756, 6758, 6759, 6769, 6774, 6824, 6830, 6879, 6882, 6899, 6916, 6944, 6960, 6964, 6981, 6983, 7037, 7077, 7087, 7120, 7137, 7182, 7188, 7193, 7196, 7204, 7211, 7215, 7236, 7256, 7267, 7268, 7283, 7290, 7299, 7317, 7327, 7339, 7350, 7372, 7375, 7375, 7391, 7404, 7405, 7441, 7459, 7459, 7459, 7473, 7475, 7513, 7540, 7568, 7569, 7578, 7586, 7587, 7590, 7598, 7615, 7615, 7626, 7631, 7652, 7661, 7668, 7669, 7669, 7669, 7671, 7706, 7741, 7743, 7796, 7800, 7815, 7821, 7834, 7844, 7845, 7876, 7897, 7909, 7910, 7913, 7921, 7927, 7930, 7962, 7975, 7986, 7994, 8035, 8040, 8075, 8079, 8111, 8116, 8125, 8127, 8144, 8203, 8211, 8212, 8219, 8235, 8237, 8254, 8260, 8291, 8293, 8306, 8344, 8363, 8373, 8374, 8393, 8419, 8425, 8440, 8460, 8475, 8476, 8524, 8544, 8563, 8567, 8598, 8602, 8603, 8604, 8605, 8610, 8631, 8638, 8659, 8661, 8669, 8683, 8688, 8694, 8700, 8705, 8808, 8810, 8821, 8829, 8865, 8885, 8887, 8894, 8895, 8898, 8899, 8903, 8904, 8905, 8961, 8966, 8967, 8982, 9005, 9058, 9062, 9064, 9064, 9094, 9101, 9110, 9128, 9158, 9161, 9164, 9188, 9192, 9213, 9246, 9260, 9264, 9268, 9280, 9287, 9299, 9323, 9331, 9338, 9339, 9347, 9366, 9369, 9370, 9381, 9403, 9421, 9459, 9470, 9471, 9472, 9477, 9482, 9487, 9492, 9494, 9502, 9516, 9545, 9546, 9546, 9553, 9554, 9568, 9601, 9603, 9612, 9625, 9631, 9637, 9647, 9663, 9665, 9667, 9679, 9695, 9743, 9753, 9772, 9870, 9872, 9883, 9894, 9900, 9902, 9916, 9916, 9917, 9921, 9930, 9958, 9963, 9966, 9973, 9979, 9985, 9986 },
                new List<int>() {  937, 972, 973, 1030, 1058, 1078, 1090, 1231, 1234, 1237, 1277, 1282, 1341, 1341, 1408, 1437, 1563, 1764, 1766, 1800, 1803, 1811, 1816, 1824, 1874, 1969, 2071, 2074, 2092, 2332, 2366, 2413, 2432, 2522, 2536, 2555, 2595, 2666, 2680, 2690, 2704, 2789, 2799, 2897, 2940, 2954, 2997, 3026, 3038, 3047, 3056, 3095, 3105, 3174, 3206, 3248, 3278, 3289, 3333, 3336, 3361, 3382, 3483, 3498, 3585, 3659, 3660, 3678, 3763, 3766, 3895, 3946, 4009, 4017, 4047, 4076, 4157, 4278, 4289, 4294, 4307, 4310, 4413, 4433, 4533, 4583, 4753, 4764, 4768, 4774, 4875, 4907, 4922, 4930, 5010, 5016, 5068, 5099, 5116, 5213, 5267, 5340, 5377, 5417, 5472, 5475, 5513, 5534, 5554, 5560, 5563, 5592, 5597, 5687, 5710, 5742, 5787, 5802, 5896, 5899, 5915, 5929, 5985, 5999, 6016, 6017, 6024, 6065, 6071, 6126, 6205, 6222, 6241, 6247, 6262, 6310, 6398, 6419, 6428, 6471, 6502, 6535, 6543, 6561, 6573, 6582, 6622, 6639, 6640, 6674, 6701, 6742, 6751, 6754, 6767, 6776, 6820, 6860, 6862, 6952, 6961, 6978, 7010, 7029, 7031, 7080, 7189, 7216, 7222, 7225, 7227, 7258, 7273, 7297, 7439, 7442, 7492, 7503, 7541, 7552, 7583, 7743, 7752, 7764, 7773, 7900, 8119, 8247, 8264, 8285, 8376, 8427, 8474, 8477, 8489, 8499, 8570, 8580, 8777, 8787, 8844, 8852, 8927, 9069, 9097, 9178, 9187, 9212, 9236, 9260, 9315, 9354, 9408, 9411, 9443, 9445, 9446, 9467, 9493, 9555, 9612, 9630, 9822, 9831, 9869, 9878, 9902, 9916, 9940, 9958 },
                new List<int>() { 829, 1158, 1159, 1181, 1253, 1260, 1556, 1594, 1668, 1758, 1780, 1825, 1835, 1994, 2106, 2116, 2173, 2201, 2203, 2237, 2268, 2553, 2625, 2627, 2672, 2695, 2773, 2885, 2974, 2979, 3066, 3145, 3324, 3341, 3343, 3402, 3499, 3532, 3667, 3671, 3775, 3902, 4084, 4114, 4132, 4152, 4187, 4254, 4344, 4513, 4767, 4983, 5058, 5216, 5273, 5391, 5392, 5557, 5620, 5658, 5714, 5870, 5870, 6069, 6169, 6254, 6330, 6384, 6385, 6401, 6550, 6752, 6902, 6939, 7001, 7150, 7255, 7344, 7428, 7665, 7680, 7925, 8125, 8363, 8376, 8424, 8560, 8637, 8802, 8869, 8874, 8967, 8991, 9064, 9079, 9101, 9166, 9211, 9303, 9735, 9775, 9777, 9821, 9862, 9887, 9977 }).Dump();

          
          /*
          solve(new List<int> {  1108, 1122, 1126, 1150, 1153, 1153, 1254, 1281, 1301, 1324, 1372, 1389, 1389, 1395, 1398, 1447, 1457, 1457, 1482, 1493, 1519, 1560, 1561, 1601, 1636, 1669, 1671, 1697, 1739, 1746, 1747, 1753, 1758, 1763, 1768, 1774, 1817, 1844, 1868, 1871, 1880, 1891, 1897, 1902, 1937, 1967, 1983, 1983, 1986, 2060, 2062, 2070, 2101, 2108, 2113, 2144, 2157, 2162, 2166, 2182, 2191, 2299, 2310, 2314, 2349, 2525, 2529, 2533, 2535, 2546, 2597, 2599, 2600, 2619, 2637, 2648, 2687, 2695, 2703, 2722, 2766, 2774, 2784, 2811, 2832, 2838, 2901, 2903, 2908, 2916, 2943, 2954, 2962, 2964, 2985, 3017, 3035, 3076, 3096, 3123, 3158, 3160, 3187, 3188, 3207, 3221, 3242, 3265, 3306, 3322, 3392, 3409, 3420, 3423, 3431, 3448, 3456, 3464, 3482, 3490, 3499, 3561, 3674, 3724, 3744, 3772, 3782, 3814, 3846, 3896, 3909, 3915, 3925, 3928, 4015, 4036, 4038, 4047, 4070, 4078, 4082, 4148, 4156, 4159, 4184, 4191, 4209, 4241, 4265, 4269, 4328, 4332, 4367, 4386, 4393, 4397, 4399, 4399, 4405, 4409, 4413, 4415, 4436, 4440, 4447, 4448, 4450, 4483, 4580, 4585, 4600, 4615, 4639, 4644, 4651, 4685, 4691, 4704, 4759, 4791, 4793, 4826, 4834, 4854, 4937, 4947, 4957, 4966, 4970, 4996, 5033, 5037, 5063, 5069, 5109, 5136, 5141, 5155, 5202, 5212, 5221, 5222, 5235, 5255, 5313, 5317, 5391, 5445, 5450, 5555, 5556, 5558, 5572, 5596, 5618, 5630, 5636, 5654, 5656, 5676, 5680, 5683, 5683, 5692, 5693, 5720, 5749, 5757, 5801, 5823, 5823, 5832, 5885, 5923, 5925, 5927, 5928, 6004, 6019, 6051, 6051, 6052, 6077, 6090, 6106, 6116, 6135, 6160, 6171, 6193, 6195, 6227, 6273, 6274, 6299, 6310, 6327, 6329, 6331, 6340, 6341, 6351, 6393, 6422, 6429, 6508, 6519, 6554, 6556, 6580, 6605, 6616, 6625, 6631, 6649, 6661, 6670, 6670, 6670, 6684, 6688, 6690, 6698, 6724, 6740, 6740, 6762, 6765, 6767, 6804, 6814, 6828, 6833, 6891, 6899, 6932, 6946, 6963, 6986, 7012, 7062, 7101, 7179, 7191, 7291, 7304, 7318, 7321, 7331, 7387, 7394, 7415, 7462, 7465, 7466, 7471, 7513, 7608, 7626, 7632, 7647, 7708, 7752, 7785, 7795, 7798, 7877, 7916, 7922, 7947, 8000, 8009, 8028, 8042, 8048, 8048, 8097, 8124, 8200, 8206, 8210, 8240, 8241, 8365, 8396, 8398, 8434, 8436, 8459, 8460, 8474, 8511, 8526, 8546, 8551, 8579, 8583, 8586, 8627, 8634, 8643, 8656, 8661, 8665, 8681, 8697, 8702, 8711, 8723, 8726, 8748, 8764, 8788, 8820, 8824, 8825, 8826, 8833, 8918, 8922, 8924, 8935, 8951, 8983, 8996, 9000, 9013, 9017, 9057, 9075, 9114, 9122, 9136, 9137, 9174, 9179, 9180, 9188, 9195, 9220, 9223, 9238, 9258, 9281, 9305, 9307, 9312, 9335, 9370, 9415, 9424, 9425, 9431, 9479, 9484, 9543, 9559, 9570, 9574, 9592, 9597, 9628, 9635, 9657, 9658, 9667, 9764, 9772, 9774, 9832, 9894, 9901, 9902, 9920, 9964, 9970, 9975 },
              new List<int> {   1106, 1133, 1151, 1207, 1301, 1368, 1502, 2029, 2169, 2311, 2363, 2547, 3032, 3449, 3653, 3780, 3783, 3835, 3844, 3861, 3989, 3990, 4151, 4488, 4818, 4862, 4895, 4940, 5268, 5362, 5366, 5438, 5692, 5892, 6056, 6361, 6445, 6485, 6576, 6615, 6684, 6886, 7149, 7193, 7238, 7256, 7357, 7479, 7581, 7653, 7741, 7850, 8463, 8763, 8864, 9049, 9089, 9221, 9793, 9907, 9990 },
              new List<int> { 1107, 1110, 1163, 1209, 1229, 1244, 1263, 1271, 1276, 1528, 1528, 1558, 1934, 2201, 2210, 2253, 2348, 2379, 2556, 2632, 2674, 2727, 2842, 2884, 2970, 3000, 3069, 3171, 3173, 3188, 3207, 3318, 3464, 3520, 3521, 3567, 3724, 3923, 3951, 3952, 3954, 4024, 4027, 4143, 4220, 4300, 4332, 4342, 4501, 4514, 4780, 4897, 4967, 4984, 4992, 5030, 5175, 5193, 5205, 5276, 5351, 5355, 5376, 5392, 5943, 5944, 5980, 6151, 6220, 6259, 6317, 6445, 6795, 6807, 6833, 6975, 7028, 7046, 7061, 7268, 7362, 7382, 7463, 7473, 7580, 7637, 7830, 7911, 7921, 7995, 8017, 8107, 8172, 8218, 8239, 8242, 8444, 8588, 8692, 8792, 8820, 8958, 9169, 9176, 9421, 9428, 9458, 9503, 9592, 9641, 9754, 9826, 9866, 9921, 9924})
              .Dump();
              */

    }


        public int minimize(List<int> A, List<int> B, List<int> C)
        {
            if (B.Count > A.Count && B.Count > C.Count) return minimize(B, A, C);
            if (C.Count > A.Count && C.Count > B.Count) return minimize(C, A, B);
            var minmax = Int32.MaxValue;
            var a = 0;
            var b = 0;
            var c = 0;
            while (a < A.Count)
            {
                b = Search(B, A[a],b);
                c = Search(C, A[a],c );
                if (minmax > GetValue(A[a], B[b],C[c]))
                {
                    minmax = GetValue(A[a], B[b], C[c]);
                }

                a++;
            }

            return minmax;
        }

        private int Search(List<int> list, int value, int start)
        {
            if (list.Count == 0) return -1;
            if (list.Count == 1) return 0;
            var lo = start;
            var hi = list.Count -1;
            while (lo <= hi)
            {
                var mid = lo + (hi - lo) / 2;
                if (list[mid] == value) return mid;
                if (list[mid] > value)
                {
                    hi = mid -1;
                }
                else
                {
                    lo = mid + 1;
                }
            }

            if (hi >= list.Count - 1)
            {
                return hi;
            }
            if (hi < 0)
            {
                return lo;
            }
            return Math.Abs(list[hi] - value) < Math.Abs(list[hi+1] - value)? hi: hi+1 ;
        }

        private static int GetValue(int a, int b, int c)
        {
            //max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i]))
            return Math.Max(Math.Max(Math.Abs(a - b), Math.Abs(b - c)), Math.Abs(c-a));
        }
    }
}
